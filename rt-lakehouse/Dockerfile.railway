# Railway Multi-Service Dockerfile for RT-Lakehouse
FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for frontend
# RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
#     && apt-get install -y nodejs

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY rt-lakehouse/requirements-railway.txt /app/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
WORKDIR /app
COPY rt-lakehouse/ /app/

# Skip frontend build for Railway demo
# Copy frontend package.json
# COPY rt-lakehouse/services/frontend/package.json /app/frontend/package.json
# COPY rt-lakehouse/services/frontend/package-lock.json /app/frontend/package-lock.json

# Install frontend dependencies
# WORKDIR /app/frontend
# RUN npm ci --only=production

# Build frontend
# WORKDIR /app/services/frontend
# RUN npm run build

# Set final working directory
WORKDIR /app

# Create required directories for Railway demo
RUN mkdir -p /delta

# Create startup script
RUN echo '#!/bin/bash\n\
echo "Starting RT-Lakehouse Assistant API for Railway..."\n\
echo "Checking file structure..."\n\
ls -la /app/\n\
ls -la /app/services/ || echo "Services directory not found"\n\
if [ -f "/app/services/assistant_railway.py" ]; then\n\
    echo "Found assistant_railway.py (Railway-optimized), starting..."\n\
    cd /app/services && python assistant_railway.py\n\
elif [ -f "/app/services/assistant_api.py" ]; then\n\
    echo "Found assistant_api.py, starting..."\n\
    cd /app/services && python assistant_api.py\n\
else\n\
    echo "ERROR: No assistant API found!"\n\
    find /app -name "*.py" -type f\n\
    exit 1\n\
fi' > /app/start.sh && chmod +x /app/start.sh

# Expose port
EXPOSE 8000

# Start the application
CMD ["/app/start.sh"]
